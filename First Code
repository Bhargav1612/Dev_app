import UIKit
import Speech

class SearchListTemplate: UIViewController, SearchTextFieldDelegate, SFSpeechRecognizerDelegate {

    var searchTextField: SearchTextField!

    // For speech recognition
    private let speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: "en-US"))!
    private let audioEngine = AVAudioEngine()
    private var recognitionRequest: SFSpeechAudioBufferRecognitionRequest?
    private var recognitionTask: SFSpeechRecognitionTask?

    override func viewDidLoad() {
        super.viewDidLoad()

        // Assuming `searchTextField` is already added to the view
        searchTextField.delegate = self
        
        configureSpeechRecognizer()
        
        // Additional search-related setup
    }

    // Handle search icon tap
    func searchIconTapped(searchText: String) {
        performSearch(searchText: searchText)
    }

    // Handle mic icon tap and start voice recognition
    func micIconTapped(tapGestureRecognizer: UITapGestureRecognizer) {
        print("Microphone icon tapped, starting speech recognition.")
        startListening() // Call the method to start speech recognition
    }

    private func configureSpeechRecognizer() {
        speechRecognizer.delegate = self
        SFSpeechRecognizer.requestAuthorization { authStatus in
            switch authStatus {
            case .authorized:
                print("Speech recognition authorized")
            case .denied, .restricted, .notDetermined:
                print("Speech recognition not available")
            @unknown default:
                break
            }
        }
    }

    private func startListening() {
        // Check if the audio engine is already running
        if audioEngine.isRunning {
            stopListening()
            return
        }

        // Start the audio engine and request recognition
        recognitionRequest = SFSpeechAudioBufferRecognitionRequest()
        let inputNode = audioEngine.inputNode
        recognitionRequest?.shouldReportPartialResults = true

        recognitionTask = speechRecognizer.recognitionTask(with: recognitionRequest!) { [weak self] result, error in
            guard let self = self else { return }
            if let result = result {
                let recognizedText = result.bestTranscription.formattedString
                DispatchQueue.main.async {
                    self.searchTextField.textField.text = recognizedText // Populate textField with recognized speech
                }
            }

            if error != nil || (result?.isFinal ?? false) {
                self.stopListening()
            }
        }

        let recordingFormat = inputNode.outputFormat(forBus: 0)
        inputNode.installTap(onBus: 0, bufferSize: 1024, format: recordingFormat) { (buffer, when) in
            self.recognitionRequest?.append(buffer)
        }

        audioEngine.prepare()
        try? audioEngine.start()
    }

    private func stopListening() {
        audioEngine.stop()
        recognitionRequest?.endAudio()
        recognitionTask?.cancel()
    }

    
    }
}
