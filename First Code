func saveSearchTerm(_ searchTerm: String) {
    var searchHistory = UserDefaults.standard.array(forKey: "searchHistory") as? [String] ?? []

    if !searchHistory.contains(searchTerm) {
        searchHistory.append(searchTerm)
        UserDefaults.standard.set(searchHistory, forKey: "searchHistory")
        print("Saved search term: \(searchTerm)")
    }
}

func setupSearchHistoryTableView() {
    searchHistoryTableView = TableView(frame: .zero, style: .plain)
    searchHistoryTableView.translatesAutoresizingMaskIntoConstraints = false
    searchHistoryTableView.rowHeight = UITableView.automaticDimension
    searchHistoryTableView.backgroundColor = .clear
    searchHistoryTableView.dataSource = self
    searchHistoryTableView.delegate = self
    searchHistoryTableView.separatorStyle = .none
    self.overlayView.addSubview(searchHistoryTableView)

    NSLayoutConstraint.activate([
        searchHistoryTableView.topAnchor.constraint(equalTo: overlayView.topAnchor),
        searchHistoryTableView.leftAnchor.constraint(equalTo: overlayView.leftAnchor),
        overlayView.rightAnchor.constraint(equalTo: searchHistoryTableView.rightAnchor),
        searchHistoryTableView.heightAnchor.constraint(equalTo: overlayView.heightAnchor, multiplier: 0.45)
    ])
}


func toggleTableViewsBasedOnSearch() {
    if searchTextField?.text?.isEmpty == true {
        searchHistoryTableView.isHidden = false
        searchSuggestionsTableView.isHidden = true
        loadSearchHistoryFromUserDefaults()
    } else {
        searchHistoryTableView.isHidden = true
        searchSuggestionsTableView.isHidden = false
    }
}

func loadSearchHistoryFromUserDefaults() {
    let searchHistory = UserDefaults.standard.array(forKey: "searchHistory") as? [String] ?? []
    searchMoleculesInfo = searchHistory.map { term in
        return (identifier: "historyCell", class: UITableViewCell.self, molecule: SearchHistoryMoleculeModel(term: term))
    }
    searchHistoryTableView.reloadData()
}


override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    if tableView == searchHistoryTableView {
        return searchMoleculesInfo?.count ?? 0
    } else if tableView == searchSuggestionsTableView {
        return searchMoleculesInfo?.count ?? 0
    }
    return 0
}

override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    if tableView == searchHistoryTableView {
        let cell = tableView.dequeueReusableCell(withIdentifier: "historyCell", for: indexPath)
        cell.textLabel?.text = (searchMoleculesInfo?[indexPath.row].molecule as? SearchHistoryMoleculeModel)?.term
        return cell
    } else if tableView == searchSuggestionsTableView {
        let cell = tableView.dequeueReusableCell(withIdentifier: "suggestionCell", for: indexPath)
        // Configure suggestion cell
        return cell
    }
    return UITableViewCell()
}


class SearchHistoryMoleculeModel: ListItemModelProtocol, MoleculeModelProtocol {
    var term: String
    init(term: String) {
        self.term = term
    }
}


public override func textFieldDidBeginEditing(_ textField: UITextField) {
    toggleTableViewsBasedOnSearch()
}

public override func textFieldShouldReturn(_ textField: UITextField) -> Bool {
    if let searchTerm = textField.text?.trimmingCharacters(in: .whitespacesAndNewlines), !searchTerm.isEmpty {
        saveSearchTerm(searchTerm)
    }
    return true
}
