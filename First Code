
import Speech
import AVFoundation

private let speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: "en-US"))
private var recognitionRequest: SFSpeechAudioBufferRecognitionRequest?
private var recognitionTask: SFSpeechRecognitionTask?
private let audioEngine = AVAudioEngine()

private let voiceSearchButton: UIButton = {
    let button = UIButton(type: .system)
    button.setTitle("ðŸŽ¤", for: .normal)
    button.translatesAutoresizingMaskIntoConstraints = false
    return button
}()

private func setupVoiceSearchButton() {
    // Add button to the view
    view.addSubview(voiceSearchButton)

    // Constraints for voice search button
    NSLayoutConstraint.activate([
        voiceSearchButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
        voiceSearchButton.centerYAnchor.constraint(equalTo: view.centerYAnchor)
    ])

    // Closure for button click
    voiceSearchButton.addAction(UIAction(handler: { [weak self] _ in
        self?.startVoiceRecognition()
    }), for: .touchUpInside)
}


private func startVoiceRecognition() {
    if audioEngine.isRunning {
        audioEngine.stop()
        recognitionRequest?.endAudio()
    } else {
        startListening()
    }
}

private func startListening() {
    // Ensure the speech recognizer is available
    guard let recognizer = SFSpeechRecognizer(), recognizer.isAvailable else {
        print("Speech recognition is not available.")
        return
    }

    // Prepare the audio engine
    recognitionRequest = SFSpeechAudioBufferRecognitionRequest()
    guard let recognitionRequest = recognitionRequest else { return }

    let inputNode = audioEngine.inputNode
    recognitionRequest.shouldReportPartialResults = true

    recognitionTask = recognizer.recognitionTask(with: recognitionRequest, resultHandler: { [weak self] result, error in
        if let result = result {
            let recognizedText = result.bestTranscription.formattedString
            self?.searchTextField?.text = recognizedText

            if result.isFinal {
                self?.performSearchDoneAction(searchString: recognizedText)
                self?.stopListening()
            }
        } else if let error = error {
            print("Speech recognition error: \(error.localizedDescription)")
            self?.stopListening()
        }
    })

    // Start the audio engine
    let recordingFormat = inputNode.outputFormat(forBus: 0)
    inputNode.installTap(onBus: 0, bufferSize: 1024, format: recordingFormat) { (buffer, _) in
        recognitionRequest.append(buffer)
    }

    audioEngine.prepare()
    do {
        try audioEngine.start()
    } catch {
        print("Audio engine couldn't start: \(error.localizedDescription)")
    }

    print("Listening for voice input...")
}

private func stopListening() {
    audioEngine.stop()
    recognitionRequest?.endAudio()
    recognitionTask?.cancel()
}

