import UIKit
import Speech
import AVFoundation

class SearchViewController: UIViewController {
    
    @IBOutlet weak var searchTextField: UITextField!
    @IBOutlet weak var searchHistoryTableView: UITableView!
    @IBOutlet weak var searchSuggestionsTableView: UITableView!
    
    // Speech recognition properties
    private let speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: "en-US"))
    private var recognitionRequest: SFSpeechAudioBufferRecognitionRequest?
    private var recognitionTask: SFSpeechRecognitionTask?

    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Other setup code...
        dismissKeyboardTapGesture?.delegate = self
    }

    public func startVoiceRecognition() {
        // Request authorization for speech recognition
        SFSpeechRecognizer.requestAuthorization { authStatus in
            guard authStatus == .authorized else {
                print("Speech recognition not authorized.")
                return
            }
            
            self.setupAudioSession()
            self.recognitionRequest = SFSpeechAudioBufferRecognitionRequest()
            
            self.recognitionTask = self.speechRecognizer?.recognitionTask(with: self.recognitionRequest!) { result, error in
                guard let result = result else {
                    if let error = error {
                        print("Error during recognition: \(error.localizedDescription)")
                    }
                    return
                }
                
                let spokenText = result.bestTranscription.formattedString
                DispatchQueue.main.async {
                    self.searchTextField?.text = spokenText
                }
                
                // Trigger search once user stops speaking
                if result.isFinal {
                    self.performSearchDoneAction(spokenText)
                    self.stopRecording() // Stop recording after final result
                }
            }
            
            self.startRecording()
        }
    }
    
    private func startRecording() {
        guard let recognitionRequest = recognitionRequest else { return }
        
        let audioSession = AVAudioSession.sharedInstance()
        do {
            try audioSession.setCategory(.record, mode: .measurement, options: .duckOthers)
            try audioSession.setActive(true, options: .notifyOthersOnDeactivation)
            let inputNode = audioSession.inputNode
            
            recognitionRequest.shouldReportPartialResults = true
            
            inputNode.installTap(onBus: 0, bufferSize: 1024, format: inputNode.outputFormat(forBus: 0)) { (buffer, when) in
                self.recognitionRequest?.append(buffer)
            }
            
            inputNode.prepare()
            try inputNode.startRunning()
        } catch {
            print("Error starting audio session: \(error.localizedDescription)")
        }
    }
    
    private func stopRecording() {
        recognitionRequest?.endAudio()
        recognitionTask?.finish()
        recognitionTask = nil
        recognitionRequest = nil
    }
    
    public func performSearchDoneAction(_ searchInput: String?) {
        // Existing search handling logic...
        hideOverlayView()
        dismissKeyboard()
        // Example: saveSearchTerm(searchInput)
    }

    // Other existing methods...
}
