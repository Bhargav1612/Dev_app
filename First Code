class YourSearchViewController: UIViewController, SFSpeechRecognizerDelegate {
    private let speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: "en-US"))
    private var recognitionRequest: SFSpeechAudioBufferRecognitionRequest?
    private var recognitionTask: SFSpeechRecognitionTask?
    private let audioEngine = AVAudioEngine()

    // Add a button for voice search
    private let voiceSearchButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("ðŸŽ¤", for: .normal) // A microphone emoji
        button.addTarget(self, action: #selector(startVoiceSearch), for: .touchUpInside)
        return button
    }()
}



override func viewDidLoad() {
    super.viewDidLoad()
    
    // Add the voice search button to your view
    view.addSubview(voiceSearchButton)
    
    // Set up constraints for the button (adjust according to your layout)
    voiceSearchButton.translatesAutoresizingMaskIntoConstraints = false
    NSLayoutConstraint.activate([
        voiceSearchButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
        voiceSearchButton.centerYAnchor.constraint(equalTo: view.centerYAnchor)
    ])
}


@objc private func startVoiceSearch() {
    SFSpeechRecognizer.requestAuthorization { (authStatus) in
        switch authStatus {
        case .authorized:
            self.startRecording()
        case .denied, .restricted, .notDetermined:
            print("Speech recognition authorization denied")
        @unknown default:
            fatalError()
        }
    }
}

private func startRecording() {
    if recognitionTask != nil {
        recognitionTask?.cancel()
        recognitionTask = nil
    }

    let audioSession = AVAudioSession.sharedInstance()
    do {
        try audioSession.setCategory(.record, mode: .measurement, options: .duckOthers)
        try audioSession.setActive(true, options: .notifyOthersOnDeactivation)
        
        recognitionRequest = SFSpeechAudioBufferRecognitionRequest()
        guard let recognitionRequest = recognitionRequest else { return }
        
        let inputNode = audioEngine.inputNode
        recognitionRequest.shouldReportPartialResults = true
        
        recognitionTask = speechRecognizer?.recognitionTask(with: recognitionRequest) { result, error in
            if let result = result {
                let spokenText = result.bestTranscription.formattedString
                self.searchTextField?.text = spokenText // Populate text field with spoken text
            }
            
            if error != nil || (result?.isFinal ?? false) {
                self.audioEngine.stop()
                inputNode.removeTap(onBus: 0)
                self.recognitionRequest = nil
                self.recognitionTask = nil
            }
        }
        
        let recordingFormat = inputNode.outputFormat(forBus: 0)
        inputNode.installTap(onBus: 0, bufferSize: 1024, format: recordingFormat) { (buffer, when) in
            recognitionRequest.append(buffer)
        }
        
        inputNode.play()
    } catch {
        print("Audio session error: \(error)")
    }
}


public override func textFieldShouldReturn(_ textField: UITextField) -> Bool {
    handleSearchDoneAction(textField.text)
    return true
}
