open override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    if tableView == searchHistoryTableView {
        let cell = tableView.dequeueReusableCell(withIdentifier: "HistoryCell") ?? UITableViewCell(style: .default, reuseIdentifier: "HistoryCell")
        
        // Remove any existing subviews to avoid duplicates
        cell.contentView.subviews.forEach { $0.removeFromSuperview() }
        
        // Retrieve the search history
        let searchHistory = loadSearchHistory()
        cell.textLabel?.text = searchHistory[indexPath.row]
        
        // Create the delete button (X)
        let deleteButton = UIButton(type: .system)
        deleteButton.setTitle("X", for: .normal)
        deleteButton.setTitleColor(.red, for: .normal)
        deleteButton.tag = indexPath.row
        deleteButton.addTarget(self, action: #selector(deleteSearchHistoryItem(_:)), for: .touchUpInside)
        
        // Add the delete button to the cell's contentView
        cell.contentView.addSubview(deleteButton)
        
        // Disable Auto Layout translation and set constraints
        deleteButton.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            deleteButton.centerYAnchor.constraint(equalTo: cell.contentView.centerYAnchor),
            deleteButton.trailingAnchor.constraint(equalTo: cell.contentView.trailingAnchor, constant: -16),
            deleteButton.widthAnchor.constraint(equalToConstant: 30),
            deleteButton.heightAnchor.constraint(equalToConstant: 30)
        ])
        
        // Adjust the textLabel to leave space for the delete button
        cell.textLabel?.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            cell.textLabel!.leadingAnchor.constraint(equalTo: cell.contentView.leadingAnchor, constant: 16),
            cell.textLabel!.centerYAnchor.constraint(equalTo: cell.contentView.centerYAnchor),
            cell.textLabel!.trailingAnchor.constraint(equalTo: deleteButton.leadingAnchor, constant: -8)
        ])
        
        return cell
    } else if tableView == searchSuggestionsTableView {
        guard let moleculeInfo = searchMoleculesInfo?[indexPath.row],
              let cell = tableView.dequeueReusableCell(withIdentifier: moleculeInfo.identifier) else {
            return UITableViewCell()
        }
        // Molecule logic here...
        return cell
    }
    return UITableViewCell()
}
