import UIKit
import Speech

class ViewController: UIViewController, SFSpeechRecognizerDelegate {

    @IBOutlet weak var resultLabel: UILabel!
    @IBOutlet weak var recordButton: UIButton!

    private let speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: "en-US"))!
    private var recognitionRequest: SFSpeechAudioBufferRecognitionRequest?
    private var recognitionTask: SFSpeechRecognitionTask?
    private let audioEngine = AVAudioEngine()

    override func viewDidLoad() {
        super.viewDidLoad()
        recordButton.isEnabled = false
        speechRecognizer.delegate = self
        SFSpeechRecognizer.requestAuthorization { authStatus in
            DispatchQueue.main.async {
                self.recordButton.isEnabled = (authStatus == .authorized)
            }
        }
    }

    @IBAction func toggleRecording(_ sender: UIButton) {
        if audioEngine.isRunning {
            stopRecording()
        } else {
            startRecording()
        }
    }

    private func startRecording() {
    resultLabel.text = "Listening..."
    audioEngine.inputNode.removeTap(onBus: 0)
    recognitionRequest = SFSpeechAudioBufferRecognitionRequest()
    guard let recognitionRequest = recognitionRequest else { return }
    
    recognitionRequest.shouldReportPartialResults = true

    recognitionTask = speechRecognizer.recognitionTask(with: recognitionRequest) { result, error in
        if let result = result {
            self.resultLabel.text = result.bestTranscription.formattedString
        }
        if error != nil || (result?.isFinal == true) {
            self.stopRecording()
        }
    }

    let inputNode = audioEngine.inputNode
    let recordingFormat = inputNode.outputFormat(forBus: 0)
    inputNode.installTap(onBus: 0, bufferSize: 1024, format: recordingFormat) { buffer, when in
        recognitionRequest.append(buffer)
    }

    // Prepare the audio engine here, not the input node
    audioEngine.prepare()
    do {
        try audioEngine.start()
    } catch {
        print("Audio Engine start error: \(error)")
    }
}


    private func stopRecording() {
        audioEngine.stop()
        recognitionRequest?.endAudio()
        recognitionTask?.cancel()
        resultLabel.text = "Stopped Listening."
    }
}
