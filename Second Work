NSLayoutConstraint.activate([
    // Logo Constraints
    logoImageView.centerXAnchor.constraint(equalTo: voiceSearchOverlay.centerXAnchor),
    logoImageView.topAnchor.constraint(equalTo: voiceSearchOverlay.topAnchor, constant: 10), // Adjust for the new height

    // Label Constraints
    label.centerXAnchor.constraint(equalTo: voiceSearchOverlay.centerXAnchor),
    label.topAnchor.constraint(equalTo: logoImageView.bottomAnchor, constant: 8) // Ensure this fits within the overlay
])

let label = UILabel()
label.text = "Listening..."
label.textColor = UIColor.white
label.font = UIFont.boldSystemFont(ofSize: 24)
label.translatesAutoresizingMaskIntoConstraints = false
voiceSearchOverlay.addSubview(label)

NSLayoutConstraint.activate([
    label.centerXAnchor.constraint(equalTo: voiceSearchOverlay.centerXAnchor),
    label.topAnchor.constraint(equalTo: logoImageView.bottomAnchor, constant: 16)
])

func startBlinkingLabel() {
    let blinkingAnimation = CABasicAnimation(keyPath: "opacity")
    blinkingAnimation.fromValue = 1.0
    blinkingAnimation.toValue = 0.0
    blinkingAnimation.duration = 0.5
    blinkingAnimation.repeatCount = .infinity
    blinkingAnimation.autoreverses = true

    label.layer.add(blinkingAnimation, forKey: "blinking")
}

func micIconPressed() {
    backgroundOverlayView.isHidden = false
    voiceSearchOverlay.isHidden = false
    startBlinkingLabel()
    startListening()
}


let recognizedTextLabel = UILabel() // Create a new label for recognized text
recognizedTextLabel.text = "Listening..."
recognizedTextLabel.translatesAutoresizingMaskIntoConstraints = false
recognizedTextLabel.textAlignment = .center // Center align the text
voiceSearchOverlay.addSubview(recognizedTextLabel)

NSLayoutConstraint.activate([
    recognizedTextLabel.centerXAnchor.constraint(equalTo: voiceSearchOverlay.centerXAnchor),
    recognizedTextLabel.topAnchor.constraint(equalTo: logoImageView.bottomAnchor, constant: 16)
])


// Placeholder music animation view (to simulate the animation)
private var musicAnimationView: UIView = {
    let view = UIView(frame: .zero)
    view.backgroundColor = UIColor.systemBlue // Replace this with actual animation
    view.translatesAutoresizingMaskIntoConstraints = false
    view.isHidden = false // Show initially, hide later
    return view
}()

// Add music animation to the voice search overlay
voiceSearchOverlay.addSubview(musicAnimationView)
NSLayoutConstraint.activate([
    musicAnimationView.centerXAnchor.constraint(equalTo: voiceSearchOverlay.centerXAnchor),
    musicAnimationView.topAnchor.constraint(equalTo: voiceSearchOverlay.topAnchor, constant: 16),
    musicAnimationView.heightAnchor.constraint(equalToConstant: 60),
    musicAnimationView.widthAnchor.constraint(equalToConstant: 60)
])


musicAnimationView.isHidden = false // Show music animation initially


DispatchQueue.main.async {
    self.musicAnimationView.isHidden = true // Hide animation after speech starts
}

private func showSearchOrTryAgainButtons() {
    let searchButton = UIButton()
    searchButton.setTitle("Search", for: .normal)
    searchButton.backgroundColor = .systemBlue
    searchButton.translatesAutoresizingMaskIntoConstraints = false
    voiceSearchOverlay.addSubview(searchButton)
    searchButton.addTarget(self, action: #selector(searchUsingTextFromVoice), for: .touchUpInside)

    let tryAgainButton = UIButton()
    tryAgainButton.setTitle("Try Again", for: .normal)
    tryAgainButton.backgroundColor = .systemGray
    tryAgainButton.translatesAutoresizingMaskIntoConstraints = false
    voiceSearchOverlay.addSubview(tryAgainButton)
    tryAgainButton.addTarget(self, action: #selector(startListening), for: .touchUpInside)

    NSLayoutConstraint.activate([
        searchButton.centerXAnchor.constraint(equalTo: voiceSearchOverlay.centerXAnchor),
        searchButton.topAnchor.constraint(equalTo: voiceSearchOverlay.topAnchor, constant: 100),
        searchButton.widthAnchor.constraint(equalToConstant: 100),
        searchButton.heightAnchor.constraint(equalToConstant: 40),
        
        tryAgainButton.centerXAnchor.constraint(equalTo: voiceSearchOverlay.centerXAnchor),
        tryAgainButton.topAnchor.constraint(equalTo: searchButton.bottomAnchor, constant: 16),
        tryAgainButton.widthAnchor.constraint(equalToConstant: 100),
        tryAgainButton.heightAnchor.constraint(equalToConstant: 40)
    ])
}


if error != nil || (result?.isFinal ?? false) {
    self.stopListening()
    self.showSearchOrTryAgainButtons() // Show buttons to proceed
}
